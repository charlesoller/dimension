// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int                 @id @default(autoincrement())
  email                 String              @unique
  username              String              @unique
  hashedPassword        String
  name                  String?
  bio                   String?
  ProfilePicture        ProfilePicture?
  posts                 Post[]
  comments              Comment[]
  postLikes             PostLike[]
  commentLikes          CommentLike[]
  postReactions         PostReaction[]
  commentReactions      CommentReaction[]
  channels              Channel[]
  following             Follows[]           @relation("following")
  followers             Follows[]           @relation("follower")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @default(now())
}

model Post {
  id                Int       @id @default(autoincrement())
  url               String
  description       String?
  private           Boolean   @default(false)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
  author            User      @relation(fields: [authorId], references: [id])
  authorId          Int
  comments          Comment[]
  likes             PostLike[]
  reactions         PostReaction[]
  channels          Channel[]
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  Int
  following   User @relation("following", fields: [followingId], references: [id])
  followingId Int

  @@id([followerId, followingId])
}

model Comment {
  id        Int           @id @default(autoincrement())
  content   String
  authorId  Int
  author    User          @relation(fields: [authorId], references: [id])
  postId    Int
  post      Post          @relation(fields: [postId], references: [id])
  parentId  Int?
  likes     CommentLike[]
  reactions CommentReaction[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now())

  parent    Comment?      @relation("CommentToComment", fields: [parentId], references: [id])
  children  Comment[]     @relation("CommentToComment")

  @@index([postId])
  @@index([parentId])
}

model PostLike {
  authorId    Int          
  author      User          @relation(fields: [authorId], references: [id])
  postId      Int
  post        Post          @relation(fields: [postId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())

  @@id([authorId, postId])
}

model CommentLike {
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id])
  commentId      Int    
  comment        Comment          @relation(fields: [commentId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())

  @@id([authorId, commentId])
}

model PostReaction {
  id          Int           @id @default(autoincrement())
  authorId    Int
  author      User          @relation(fields: [authorId], references: [id])
  postId      Int
  post        Post          @relation(fields: [postId], references: [id])
  reaction    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
}

model CommentReaction {
  id             Int              @id @default(autoincrement())
  authorId       Int
  author         User             @relation(fields: [authorId], references: [id])
  commentId      Int    
  comment        Comment          @relation(fields: [commentId], references: [id])
  reaction       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
}

model ProfilePicture {
  id             Int              @id @default(autoincrement())
  url            String
  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id])
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @default(now())
}

model Channel {
  id              Int                @id @default(autoincrement())
  name            String             @unique
  users           User[]             
  posts           Post[]             
}